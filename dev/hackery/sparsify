#!/usr/bin/env perl
use strict;
use warnings;
no warnings 'portable';

use Benchmark qw/timethese/;

# If we have a sparse bitvector, what's the fastest way to get a list of all set
# bits? Let's say our vector is 1kB long.
my $bv = "\0" x 1024;
vec($bv, int rand(8192), 1) = 1 for 1..20;

my @qs = unpack 'Q>*', $bv;
my @cs = unpack 'C*', $bv;

# Before we kick the test off, make sure our functions work the same way.
my $vec_out        = join",", vec_sparsify_sloooow();
my $unpack_out     = join",", unpack_q();
my $regex_ord_out  = join",", regex_sparsify_ord_capture();
my $regex_ordc_out = join",", regex_sparsify_ordc_loop();
my $regex_ordb_out = join",", regex_sparsify_ord_boost();
my $substr_out     = join",", substr_scan();

die "unpack: $unpack_out vs $vec_out"        unless $unpack_out eq $vec_out;
die "substr: $substr_out vs $vec_out"        unless $substr_out eq $vec_out;
die "regexord: $regex_ord_out vs $vec_out"   unless $regex_ord_out eq $vec_out;
die "regexordc: $regex_ordc_out vs $vec_out" unless $regex_ordc_out eq $vec_out;
die "regexordb: $regex_ordb_out vs $vec_out" unless $regex_ordb_out eq $vec_out;

timethese 4000000, {
  bv_bitop   => \&bv_bitop,
};

timethese 100000, {
  #vec         => \&vec_sparsify_sloooow,
  bv_vecread => \&bv_vecread,
  unpack     => \&unpack_q,
  substr     => \&substr_scan,
  regex_ord  => \&regex_sparsify_ord_capture,
  regex_ordc => \&regex_sparsify_ordc_loop,
  regex_ordb => \&regex_sparsify_ord_boost,
};

sub bv_bitop
{
  $bv |= $bv;
}

sub bv_vecread
{
  my $t = 0;
  $t += $_ for @qs;
  $t;
}

sub regex_sparsify_ord_capture
{
  my @r;
  pos($bv) = 0;
  while ($bv =~ /([^\0])/g)
  {
    my $i = pos($bv) - 1 << 3;
    my $c = ord($1) << 1;
    ($c & 1 && push @r, $i), ++$i while $c >>= 1;
  }
  @r;
}

sub substr_scan
{
  my @r;
  my $i = 0;
  while ($i < 1024)
  {
    $i += 64 while $i < 1024 - 64 && substr($bv, $i, 64) eq "\0" x 64;
    $i += 16 while $i < 1024 - 16 && substr($bv, $i, 16) eq "\0" x 16;
    $i += 4  while $i < 1024 - 4  && !vec($bv, $i >> 2, 32);
    my $c;
    ++$i while $i < 1024 && !($c = vec $bv, $i, 8);
    my $bit = $i << 3;
    $c <<= 1;
    ($c & 1 && push @r, $bit), ++$bit while $c >>= 1;
    ++$i;
  }
  @r;
}

sub regex_sparsify_ord_boost
{
  my @r;
  pos($bv) = 0;
  while (defined pos $bv)
  {
    pos($bv) += 128 while substr($bv, pos($bv), 128) eq "\0" x 128;
    while ($bv =~ /([^\0])/g)
    {
      my $i = pos($bv) - 1 << 3;
      my $c = ord($1) << 1;
      ($c & 1 && push @r, $i), ++$i while $c >>= 1;
    }
  }
  @r;
}

sub regex_sparsify_ordc_loop
{
  my @r;
  pos($bv) = 0;
  while ($bv =~ /([^\0])/g)
  {
    my $i = pos($bv) - 1 << 3;
    my $c = ord($1);
    $c & 1 << $_ and push @r, $i | $_ for 0..7;
  }
  @r;
}

sub vec_sparsify_sloooow
{
  grep vec($bv, $_, 1), 0..8191;
}

sub unpack_q
{
  my @r;
  my $b = -8;
  my $c;
  for my $q (@qs)
  {
    $b += 8;
    next unless $q;

    # One or more bytes within this quad has a set bit in it. Search a byte at a
    # time.
    for my $i (0..7)                    # byte index
    {
      next unless $c = $cs[$b + $i];
      $c & 1 << $_ and push @r, $b + $i << 3 | $_ for 0..7;
    }
  }
  @r;
}
